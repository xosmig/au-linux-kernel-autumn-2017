Задание заключается в дальнейшей доработке кода виртуального
устройства хранения данных (VSD).

Теперь в модуле vsd_device мы выделяем память VSD с помощью
vzalloc (vmalloc). Это нужно чтобы не расходовать дорогую
непрерывную физическую память системы, когда можно обойтись
без нее. Данное изменение несколько усложнит модуль vsd_driver.
---------------------------------------------------------------
Задание 1.
Первая часть задания заключается в доработке vsd_driver, то есть
ядерной части кода VSD. Вам будет необходимо реализовать в модуле
vsd_driver функциональность отображения VSD в память
пользовательского процесса (VSD mmap). Часть кода уже написана,
например основная функция, реализующая mmap vsd_dev_mmap и
вспомогательные функции из vm_operations_struct.

Вам необходимо будет реализовать функцию map_vmalloc_range,
которая отвечает за конфигурацию таблицы страниц пользовательского
процесса таким образом, чтобы запрошенный процессом диапазон
виртуальных адресов был направлен на физические страницы VSD.

Далее вам нужно будет запретить изменение размера VSD (с помощью
VSD_IOCTL_SET_SIZE) пока есть хотябы один процесс, отобразивший
VSD себе в память. Помните, что процессы, сделавшие fork не вызывают
функции open/close у унаследованного файлового дескриптора. Тем не менее
функции vm_operations_struct.open/close вызываются для каждого
форка.
--------------------------------------------------------------
Задание 2.
Реализуйте интерфейс C библиотеки для работы с VSD,
описанный в файле vsd_device.h.

Набор тестов vsd_test.c поможет вам проверить правильность решения
обоих заданий.
